@page "/usuarios"
@using ProjetoVendas.Client.Services
@using Shared.Models
@inject UsuarioService UsuarioService

<h3>Usuários</h3>

<input placeholder="Nome" @bind="novoUsuario.Nome" />
<input placeholder="Login" @bind="novoUsuario.Login" />
<input placeholder="Senha" @bind="novoUsuario.Senha" type="password" />
<select @bind="novoUsuario.Tipo">
    <option value="0">Admin</option>
    <option value="1">User</option>
</select>
<button @onclick="AdicionarUsuario">Adicionar</button>

<hr />

@if (usuarios is null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Nome</th>
                <th>Login</th>
                <th>Tipo</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var u in usuarios)
            {
                <tr>
                    <td>@u.Nome</td>
                    <td>@u.Login</td>
                    <td>@u.Tipo</td>
                    <td><button @onclick="() => RemoverUsuario(u.Id)">Remover</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Usuario>? usuarios;
    private Usuario novoUsuario = new();

    protected override async Task OnInitializedAsync()
    {
        await CarregarUsuarios();
    }

    private async Task CarregarUsuarios()
    {
        usuarios = await UsuarioService.GetUsuariosAsync();
    }

    private async Task AdicionarUsuario()
    {
        await UsuarioService.AddUsuarioAsync(novoUsuario);
        novoUsuario = new(); 
        await CarregarUsuarios();
    }

    private async Task RemoverUsuario(int id)
    {
        await UsuarioService.DeleteUsuarioAsync(id);
        await CarregarUsuarios();
    }
}
